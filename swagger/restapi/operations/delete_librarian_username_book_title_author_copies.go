// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteLibrarianUsernameBookTitleAuthorCopiesHandlerFunc turns a function with the right signature into a delete librarian username book title author copies handler
type DeleteLibrarianUsernameBookTitleAuthorCopiesHandlerFunc func(DeleteLibrarianUsernameBookTitleAuthorCopiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteLibrarianUsernameBookTitleAuthorCopiesHandlerFunc) Handle(params DeleteLibrarianUsernameBookTitleAuthorCopiesParams) middleware.Responder {
	return fn(params)
}

// DeleteLibrarianUsernameBookTitleAuthorCopiesHandler interface for that can handle valid delete librarian username book title author copies params
type DeleteLibrarianUsernameBookTitleAuthorCopiesHandler interface {
	Handle(DeleteLibrarianUsernameBookTitleAuthorCopiesParams) middleware.Responder
}

// NewDeleteLibrarianUsernameBookTitleAuthorCopies creates a new http.Handler for the delete librarian username book title author copies operation
func NewDeleteLibrarianUsernameBookTitleAuthorCopies(ctx *middleware.Context, handler DeleteLibrarianUsernameBookTitleAuthorCopiesHandler) *DeleteLibrarianUsernameBookTitleAuthorCopies {
	return &DeleteLibrarianUsernameBookTitleAuthorCopies{Context: ctx, Handler: handler}
}

/* DeleteLibrarianUsernameBookTitleAuthorCopies swagger:route DELETE /librarian/{username}/book/{title}/{author}/{copies} deleteLibrarianUsernameBookTitleAuthorCopies

delete a book by its title/author

*/
type DeleteLibrarianUsernameBookTitleAuthorCopies struct {
	Context *middleware.Context
	Handler DeleteLibrarianUsernameBookTitleAuthorCopiesHandler
}

func (o *DeleteLibrarianUsernameBookTitleAuthorCopies) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteLibrarianUsernameBookTitleAuthorCopiesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
