// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutLibrarianUsernameUserUserCheckoutReader is a Reader for the PutLibrarianUsernameUserUserCheckout structure.
type PutLibrarianUsernameUserUserCheckoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLibrarianUsernameUserUserCheckoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutLibrarianUsernameUserUserCheckoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutLibrarianUsernameUserUserCheckoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutLibrarianUsernameUserUserCheckoutOK creates a PutLibrarianUsernameUserUserCheckoutOK with default headers values
func NewPutLibrarianUsernameUserUserCheckoutOK() *PutLibrarianUsernameUserUserCheckoutOK {
	return &PutLibrarianUsernameUserUserCheckoutOK{}
}

/* PutLibrarianUsernameUserUserCheckoutOK describes a response with status code 200, with default header values.

Updated
*/
type PutLibrarianUsernameUserUserCheckoutOK struct {
}

func (o *PutLibrarianUsernameUserUserCheckoutOK) Error() string {
	return fmt.Sprintf("[PUT /librarian/{username}/user/{user}/checkout][%d] putLibrarianUsernameUserUserCheckoutOK ", 200)
}

func (o *PutLibrarianUsernameUserUserCheckoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLibrarianUsernameUserUserCheckoutNotFound creates a PutLibrarianUsernameUserUserCheckoutNotFound with default headers values
func NewPutLibrarianUsernameUserUserCheckoutNotFound() *PutLibrarianUsernameUserUserCheckoutNotFound {
	return &PutLibrarianUsernameUserUserCheckoutNotFound{}
}

/* PutLibrarianUsernameUserUserCheckoutNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutLibrarianUsernameUserUserCheckoutNotFound struct {
}

func (o *PutLibrarianUsernameUserUserCheckoutNotFound) Error() string {
	return fmt.Sprintf("[PUT /librarian/{username}/user/{user}/checkout][%d] putLibrarianUsernameUserUserCheckoutNotFound ", 404)
}

func (o *PutLibrarianUsernameUserUserCheckoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PutLibrarianUsernameUserUserCheckoutBody put librarian username user user checkout body
swagger:model PutLibrarianUsernameUserUserCheckoutBody
*/
type PutLibrarianUsernameUserUserCheckoutBody struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this put librarian username user user checkout body
func (o *PutLibrarianUsernameUserUserCheckoutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutLibrarianUsernameUserUserCheckoutBody) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"author", "body", o.Author); err != nil {
		return err
	}

	return nil
}

func (o *PutLibrarianUsernameUserUserCheckoutBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put librarian username user user checkout body based on context it is used
func (o *PutLibrarianUsernameUserUserCheckoutBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckoutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckoutBody) UnmarshalBinary(b []byte) error {
	var res PutLibrarianUsernameUserUserCheckoutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
