// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostLibrarianUsernameUserHandlerFunc turns a function with the right signature into a post librarian username user handler
type PostLibrarianUsernameUserHandlerFunc func(PostLibrarianUsernameUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostLibrarianUsernameUserHandlerFunc) Handle(params PostLibrarianUsernameUserParams) middleware.Responder {
	return fn(params)
}

// PostLibrarianUsernameUserHandler interface for that can handle valid post librarian username user params
type PostLibrarianUsernameUserHandler interface {
	Handle(PostLibrarianUsernameUserParams) middleware.Responder
}

// NewPostLibrarianUsernameUser creates a new http.Handler for the post librarian username user operation
func NewPostLibrarianUsernameUser(ctx *middleware.Context, handler PostLibrarianUsernameUserHandler) *PostLibrarianUsernameUser {
	return &PostLibrarianUsernameUser{Context: ctx, Handler: handler}
}

/* PostLibrarianUsernameUser swagger:route POST /librarian/{username}/user postLibrarianUsernameUser

request a user be added to the library

*/
type PostLibrarianUsernameUser struct {
	Context *middleware.Context
	Handler PostLibrarianUsernameUserHandler
}

func (o *PostLibrarianUsernameUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostLibrarianUsernameUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
