// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteLibrarianUsernameUserUserHandlerFunc turns a function with the right signature into a delete librarian username user user handler
type DeleteLibrarianUsernameUserUserHandlerFunc func(DeleteLibrarianUsernameUserUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteLibrarianUsernameUserUserHandlerFunc) Handle(params DeleteLibrarianUsernameUserUserParams) middleware.Responder {
	return fn(params)
}

// DeleteLibrarianUsernameUserUserHandler interface for that can handle valid delete librarian username user user params
type DeleteLibrarianUsernameUserUserHandler interface {
	Handle(DeleteLibrarianUsernameUserUserParams) middleware.Responder
}

// NewDeleteLibrarianUsernameUserUser creates a new http.Handler for the delete librarian username user user operation
func NewDeleteLibrarianUsernameUserUser(ctx *middleware.Context, handler DeleteLibrarianUsernameUserUserHandler) *DeleteLibrarianUsernameUserUser {
	return &DeleteLibrarianUsernameUserUser{Context: ctx, Handler: handler}
}

/* DeleteLibrarianUsernameUserUser swagger:route DELETE /librarian/{username}/user/{user} deleteLibrarianUsernameUserUser

delete a user by their username

*/
type DeleteLibrarianUsernameUserUser struct {
	Context *middleware.Context
	Handler DeleteLibrarianUsernameUserUserHandler
}

func (o *DeleteLibrarianUsernameUserUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteLibrarianUsernameUserUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
