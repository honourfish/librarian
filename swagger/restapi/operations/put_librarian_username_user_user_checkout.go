// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutLibrarianUsernameUserUserCheckoutHandlerFunc turns a function with the right signature into a put librarian username user user checkout handler
type PutLibrarianUsernameUserUserCheckoutHandlerFunc func(PutLibrarianUsernameUserUserCheckoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutLibrarianUsernameUserUserCheckoutHandlerFunc) Handle(params PutLibrarianUsernameUserUserCheckoutParams) middleware.Responder {
	return fn(params)
}

// PutLibrarianUsernameUserUserCheckoutHandler interface for that can handle valid put librarian username user user checkout params
type PutLibrarianUsernameUserUserCheckoutHandler interface {
	Handle(PutLibrarianUsernameUserUserCheckoutParams) middleware.Responder
}

// NewPutLibrarianUsernameUserUserCheckout creates a new http.Handler for the put librarian username user user checkout operation
func NewPutLibrarianUsernameUserUserCheckout(ctx *middleware.Context, handler PutLibrarianUsernameUserUserCheckoutHandler) *PutLibrarianUsernameUserUserCheckout {
	return &PutLibrarianUsernameUserUserCheckout{Context: ctx, Handler: handler}
}

/* PutLibrarianUsernameUserUserCheckout swagger:route PUT /librarian/{username}/user/{user}/checkout putLibrarianUsernameUserUserCheckout

request a book to be checked out by a user

*/
type PutLibrarianUsernameUserUserCheckout struct {
	Context *middleware.Context
	Handler PutLibrarianUsernameUserUserCheckoutHandler
}

func (o *PutLibrarianUsernameUserUserCheckout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutLibrarianUsernameUserUserCheckoutParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutLibrarianUsernameUserUserCheckoutBody put librarian username user user checkout body
//
// swagger:model PutLibrarianUsernameUserUserCheckoutBody
type PutLibrarianUsernameUserUserCheckoutBody struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this put librarian username user user checkout body
func (o *PutLibrarianUsernameUserUserCheckoutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutLibrarianUsernameUserUserCheckoutBody) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"author", "body", o.Author); err != nil {
		return err
	}

	return nil
}

func (o *PutLibrarianUsernameUserUserCheckoutBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put librarian username user user checkout body based on context it is used
func (o *PutLibrarianUsernameUserUserCheckoutBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckoutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckoutBody) UnmarshalBinary(b []byte) error {
	var res PutLibrarianUsernameUserUserCheckoutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
