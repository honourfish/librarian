// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteLibrarianUsernameUserUserUsernameHandlerFunc turns a function with the right signature into a delete librarian username user user username handler
type DeleteLibrarianUsernameUserUserUsernameHandlerFunc func(DeleteLibrarianUsernameUserUserUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteLibrarianUsernameUserUserUsernameHandlerFunc) Handle(params DeleteLibrarianUsernameUserUserUsernameParams) middleware.Responder {
	return fn(params)
}

// DeleteLibrarianUsernameUserUserUsernameHandler interface for that can handle valid delete librarian username user user username params
type DeleteLibrarianUsernameUserUserUsernameHandler interface {
	Handle(DeleteLibrarianUsernameUserUserUsernameParams) middleware.Responder
}

// NewDeleteLibrarianUsernameUserUserUsername creates a new http.Handler for the delete librarian username user user username operation
func NewDeleteLibrarianUsernameUserUserUsername(ctx *middleware.Context, handler DeleteLibrarianUsernameUserUserUsernameHandler) *DeleteLibrarianUsernameUserUserUsername {
	return &DeleteLibrarianUsernameUserUserUsername{Context: ctx, Handler: handler}
}

/* DeleteLibrarianUsernameUserUserUsername swagger:route DELETE /librarian/{username}/user/{user_username} deleteLibrarianUsernameUserUserUsername

delete a user by their username

*/
type DeleteLibrarianUsernameUserUserUsername struct {
	Context *middleware.Context
	Handler DeleteLibrarianUsernameUserUserUsernameHandler
}

func (o *DeleteLibrarianUsernameUserUserUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteLibrarianUsernameUserUserUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
