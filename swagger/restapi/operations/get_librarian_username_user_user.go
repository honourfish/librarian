// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLibrarianUsernameUserUserHandlerFunc turns a function with the right signature into a get librarian username user user handler
type GetLibrarianUsernameUserUserHandlerFunc func(GetLibrarianUsernameUserUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLibrarianUsernameUserUserHandlerFunc) Handle(params GetLibrarianUsernameUserUserParams) middleware.Responder {
	return fn(params)
}

// GetLibrarianUsernameUserUserHandler interface for that can handle valid get librarian username user user params
type GetLibrarianUsernameUserUserHandler interface {
	Handle(GetLibrarianUsernameUserUserParams) middleware.Responder
}

// NewGetLibrarianUsernameUserUser creates a new http.Handler for the get librarian username user user operation
func NewGetLibrarianUsernameUserUser(ctx *middleware.Context, handler GetLibrarianUsernameUserUserHandler) *GetLibrarianUsernameUserUser {
	return &GetLibrarianUsernameUserUser{Context: ctx, Handler: handler}
}

/* GetLibrarianUsernameUserUser swagger:route GET /librarian/{username}/user/{user} getLibrarianUsernameUserUser

request a book by its title

*/
type GetLibrarianUsernameUserUser struct {
	Context *middleware.Context
	Handler GetLibrarianUsernameUserUserHandler
}

func (o *GetLibrarianUsernameUserUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLibrarianUsernameUserUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
