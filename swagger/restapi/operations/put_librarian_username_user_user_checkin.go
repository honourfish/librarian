// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutLibrarianUsernameUserUserCheckinHandlerFunc turns a function with the right signature into a put librarian username user user checkin handler
type PutLibrarianUsernameUserUserCheckinHandlerFunc func(PutLibrarianUsernameUserUserCheckinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutLibrarianUsernameUserUserCheckinHandlerFunc) Handle(params PutLibrarianUsernameUserUserCheckinParams) middleware.Responder {
	return fn(params)
}

// PutLibrarianUsernameUserUserCheckinHandler interface for that can handle valid put librarian username user user checkin params
type PutLibrarianUsernameUserUserCheckinHandler interface {
	Handle(PutLibrarianUsernameUserUserCheckinParams) middleware.Responder
}

// NewPutLibrarianUsernameUserUserCheckin creates a new http.Handler for the put librarian username user user checkin operation
func NewPutLibrarianUsernameUserUserCheckin(ctx *middleware.Context, handler PutLibrarianUsernameUserUserCheckinHandler) *PutLibrarianUsernameUserUserCheckin {
	return &PutLibrarianUsernameUserUserCheckin{Context: ctx, Handler: handler}
}

/* PutLibrarianUsernameUserUserCheckin swagger:route PUT /librarian/{username}/user/{user}/checkin putLibrarianUsernameUserUserCheckin

request a book to be checked in by a user

*/
type PutLibrarianUsernameUserUserCheckin struct {
	Context *middleware.Context
	Handler PutLibrarianUsernameUserUserCheckinHandler
}

func (o *PutLibrarianUsernameUserUserCheckin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutLibrarianUsernameUserUserCheckinParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutLibrarianUsernameUserUserCheckinBody put librarian username user user checkin body
//
// swagger:model PutLibrarianUsernameUserUserCheckinBody
type PutLibrarianUsernameUserUserCheckinBody struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this put librarian username user user checkin body
func (o *PutLibrarianUsernameUserUserCheckinBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutLibrarianUsernameUserUserCheckinBody) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"author", "body", o.Author); err != nil {
		return err
	}

	return nil
}

func (o *PutLibrarianUsernameUserUserCheckinBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("book"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put librarian username user user checkin body based on context it is used
func (o *PutLibrarianUsernameUserUserCheckinBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckinBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutLibrarianUsernameUserUserCheckinBody) UnmarshalBinary(b []byte) error {
	var res PutLibrarianUsernameUserUserCheckinBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
